generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[] // Renamed for consistency
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.String // Adjusted for case consistency
  accessToken       String? @db.String
  expiresAt         Int? // Adjusted for case consistency
  tokenType         String? // Adjusted for case consistency
  scope             String?
  idToken           String? @db.String
  sessionState      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialId         String  @id @map("_id") // Adjusted for case consistency
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialId])
}

model Category {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String    @unique
  imageUrl     String
  link         String
  products     Product[]
}

model ShippingAddress {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  region  String
  city    String
  address String
  phone   String
  country String?
  email   String  @unique
  orders  Order[] // Indicates a one-to-many relationship; can be empty
}

// model Product {
//   id            String         @id @default(auto()) @map("_id") @db.ObjectId
//   title         String
//   imageUrl      String
//   description   String
//   price         Int
//   discount      Int?
//   categoryName  String
//   category      Category?      @relation(fields: [categoryName], references: [categoryName])
//   isInStock     Boolean        @default(true)
//   quantity      Int
//   productOrders ProductOrder[]
//   createdAt     DateTime       @default(now())
//   updatedAt     DateTime       @updatedAt
// }

model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  imageUrl      String
  description   String
  price         Int
  discount      Int?
  categoryName  String
  category      Category?      @relation(fields: [categoryName], references: [categoryName])
  isInStock     String
  quantity      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productOrders ProductOrder[]
}

model Order {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber   String
  orderNumber       String           @unique
  total             Float?
  status            String?
  shippingAddressId String?          @db.ObjectId
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  products          ProductOrder[]
  deliveryMethod    String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ProductOrder {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  productId     String  @db.ObjectId
  orderId       String  @db.ObjectId
  quantity      Int
  quantityTotal String
  product       Product @relation(fields: [productId], references: [id])
  order         Order   @relation(fields: [orderId], references: [id])
}

model Management {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
